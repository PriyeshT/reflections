What happens when you initialize a repository? Why do you need to do it?
- It converts an existing project or the new project to a Git repository. Initializing a repository makes it possible to start recording revisions of the project.

How is the staging area different from the working directory and the repository? What value do you think it offers?
- Staging area allows you to add the files that you would like to commit to it. The files are not yet added to the repository. So if change your mind and would like to revert your changes, you can remove the file from the staging area anytime. 

How can you use the staging area to make sure you have one commit per logical change?
- You can use the staging area to add only the files that you have changed for a particular logical change. Thus you can have only one commit per logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- Branches can be useful when you want to check out a new experimental feature to add to your program or you want to introduce a separate version of your program, but aren't sure about it at this time. This way your master branch can have the code that is working fine without any issues, and you can continue to add experimental features in your branches.

How do the diagrams help you visualize the branch structure?
- Diagrams let you see the commit history for your branches till a parent commit where all branches combine. It is helpful to find any unreachable commits, which might have been created when we checkout from only a commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

- git log -n 1 will only show 1 commit - n refers to number of commits to be displayed
- git merge branch1 branch2

- When you have no conflicts in your files, or you have updated altogether different contents in the same file, automatic merging will help to speed up the process of merging the 2 sets of code into a single one.
- Whenever Git finds conflicts in your files, it will show you the file name where the conflicts occur. And also will specify which code occurs in which branch by separating the code into HEAD, master or branch name and merged common anchestors.
-- HEAD refers to our code that we have in the current branch. i.e the branch that we are trying to merge with another branch which has also updated the same contents in the file.
-- master or branch name refers to our co-workers code which he has updated in the branch name or master. 
-- merged common anchestors refers to original version which both branches modified.

After discussing the changes, you can combine both the versions together to make it a one version and remove the special messages by GIT and commit the file.